name: Benchmarking Tests at Scale
on:
  pull_request:
    branches:
      - "main"
      - "release/v*"
  workflow_dispatch:
    inputs:
      rps:
        description: "The target requests-per-second rate. Default: 1000"
        default: '1000'
        type: string
        required: false
      connections:
        description: "The maximum allowed number of concurrent connections per event loop. HTTP/1 only. Default: 100."
        default: '100'
        type: string
        required: false
      duration:
        description: "The number of seconds that the test should run. Default: 90."
        default: '90'
        type: string
        required: false
      cpu_limits:
        description: "The CPU resource limits for the envoy gateway, in unit 'm'. Default: 1000."
        default: '1000'
        type: string
        required: false
      memory_limits:
        description: "The memory resource limits for the envoy gateway, in unit 'Mi'. Default: 1024."
        default: '1024'
        type: string
        required: false

jobs:
  benchmark-test:
    name: Benchmark Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: ./tools/github-actions/setup-deps

      - name: Run Benchmark tests
        env:
          KIND_NODE_TAG: v1.28.0
          IMAGE_PULL_POLICY: IfNotPresent
          BENCHMARK_RPS: ${{ github.event.inputs.rps || 1000 }}
          BENCHMARK_CONNECTIONS: ${{ github.event.inputs.connections || 100 }}
          BENCHMARK_DURATION: ${{ github.event.inputs.duration || 90 }}
          BENCHMARK_CPU_LIMITS: ${{ github.event.inputs.cpu_limits || 1000 }}
          BENCHMARK_MEMORY_LIMITS: ${{ github.event.inputs.memory_limits || 2048 }}
          BENCHMARK_REPORT_PATH: ./benchmark_report.md
        run: |
          pwd
          make benchmark
          pwd
          ls .

      - name: Read Benchmark results
        id: result
        uses: juliangruber/read-file-action@v1
        with:
          path: ./benchmark_report.md

      - name: Comment
        run: |
          # Use GitHub API to create a comment on the PR
          PR_NUMBER=${{ github.event.pull_request.number }}
          COMMENT=${{ steps.result.outputs.content }}
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          COMMENT_URL="https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
          
          curl -s -H "Authorization: token ${GITHUB_TOKEN}" -X POST $COMMENT_URL -d "{\"body\":\"$COMMENT\"}"
